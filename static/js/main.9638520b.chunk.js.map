{"version":3,"sources":["reducers/plantReducer.js","reducers/index.js","actions/types.js","store.js","components/Calendar.js","actions/plantActions.js","components/Categories.js","components/Plants.js","App.js","serviceWorker.js","index.js"],"names":["URL","initialState","plants","month","sow","harvest","isLoading","categories","title","img","numProducts","combineReducers","state","action","type","data","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","MONTHS","Card","props","React","useState","isHovered","setIsHovered","className","onMouseEnter","onMouseLeave","to","onClick","indexOf","document","getElementById","checked","fetchData","connect","setMonth","isSowOrHarv","dispatch","fetchPlants","a","fetch","res","json","info","id","htmlFor","name","value","defaultChecked","map","i","key","numPlants","alt","src","innerState","filterPlants","tempCats","plant","cat","category","sowMonths","includes","getPlantsFromCat","tempPlants","harvestMonths","push","useEffect","console","log","Grid","harv","flow","Sow","isToggled","setIsToggled","role","data-toggle","href","aria-expanded","aria-controls","aria-labelledby","showModal","Harvest","Plant","modalContent","setModalContent","setIsLoading","tabIndex","aria-hidden","String","data-dismiss","aria-label","floweringMonths","desc","sowDesc","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9638520b.chunk.js","sourcesContent":["import { FETCH_PLANTS, MONTH, FILTER, PLANT } from '../actions/types';\r\n\r\nconst URL = \"https://www.thompson-morgan.com\"\r\nconst initialState = {\r\n    plants: [], month: '', sow: true, harvest: true, isLoading: true, categories: [{ title: \"All Other Vegetable Seeds\", img: URL + \"/images/landing/all-other-vegetable-seeds1.jpg\", numProducts: 0 },\r\n    { title: \"Beetroot & Chard Seeds\", img: URL + \"/images/landing/beetroot-and-chard-seeds.jpg\", numProducts: 0 },\r\n    { title: \"Brassica & Leafy Green Seeds\", img: URL + \"/images/landing/brassica-and-leafy-green-seeds.jpg\", numProducts: 0 },\r\n    { title: \"Carrot & Parsnip Seeds\", img: URL + \"/images/landing/carrot-and-parsnip-seeds.jpg\", numProducts: 0 },\r\n    { title: \"Herb Seeds\", img: URL + \"/images/landing/herb-seeds2.jpg\", numProducts: 0 },\r\n    { title: \"Onion & Leek Seeds\", img: URL + \"/images/landing/onion-and-leek-seeds.jpg\", numProducts: 0 },\r\n    { title: \"Pea & Bean Seeds\", img: URL + \"/images/landing/pea-and-bean-seeds.jpg\", numProducts: 0 },\r\n    { title: \"Pepper (Sweet) & Chilli Seeds\", img: URL + \"/images/landing/pepper-sweet-and-chilli-seeds.jpg\", numProducts: 0 },\r\n    { title: \"Pumpkin, Squash & Courgette Seeds\", img: URL + \"/images/landing/pumpkin-squash-and-courgette-seeds.jpg\", numProducts: 0 },\r\n    { title: \"Salad Seeds\", img: URL + \"/images/landing/salad-seeds1.jpg\", numProducts: 0 },\r\n    { title: \"Tomato Seeds\", img: URL + \"/images/landing/most-popular-plants-tomato-plants.jpg\", numProducts: 0 }]\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case FETCH_PLANTS:\r\n            return {\r\n                ...state,\r\n                plants: action.data, isLoading: true\r\n            }\r\n        case MONTH:\r\n            return { ...state, month: action.data[0], sow: action.data[1][0], harvest: action.data[1][1] }\r\n        case FILTER:\r\n            return { ...state, categories: action.data[0], isLoading: action.data[1] }\r\n        case PLANT:\r\n            return { ...state, plants: action.data[0], isLoading: action.data[1] }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport plantReducer from './plantReducer';\r\n\r\nexport default combineReducers({ plants: plantReducer });","export const FETCH_PLANTS = 'FETCH_PLANTS';\r\nexport const MONTH = 'MONTH';\r\nexport const FILTER = 'FILTER';\r\nexport const PLANT = 'PLANT';","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\nconst store = createStore(rootReducer, initialState, compose(\r\n    applyMiddleware(...middleware)\r\n));\r\n\r\nexport default store;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../styles/App.css';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { setMonth } from '../actions/plantActions';\r\nimport { fetchPlants } from '../actions/plantActions';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst MONTHS = [\"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\"];\r\n\r\n\r\nconst Calendar = (props) => {\r\n    return (\r\n        <div id=\"container\">\r\n            <div id=\"input\"><label htmlFor=\"sow\">Sow</label><input id=\"sow\" name=\"sow\" type=\"checkbox\" value=\"sow\" defaultChecked></input><label htmlFor=\"harvest\">Harvest</label><input id=\"harvest\" name=\"harvest\" type=\"checkbox\" value=\"harvest\" defaultChecked></input></div>\r\n            <div className=\"card-deck flex-xs-column flex-lg-row flex-wrap\" id=\"months\">\r\n                {MONTHS.map((month, i) => <Card key={i} action={props.setMonth} fetchData={props.fetchPlants} month={month} />)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Card = (props) => {\r\n    const [isHovered, setIsHovered] = React.useState(false);\r\n    const handleHover = () => {\r\n        setIsHovered(true);\r\n    }\r\n    const handleUnhover = () => {\r\n        setIsHovered(false);\r\n    }\r\n    return (\r\n        <div className={\"card shadow m-3 m-lg-1\" + (isHovered ? \" hovered-img\" : \"\")} onMouseEnter={handleHover} onMouseLeave={handleUnhover}>\r\n            <Link to=\"/categories\" onClick={() => { props.action(MONTHS.indexOf(props.month), [document.getElementById('sow').checked, document.getElementById('harvest').checked]); props.fetchData(); }}>\r\n                <div className=\"card-body\">\r\n                    <h4 className=\"card-title\">{props.month}</h4>\r\n                    <p className=\"card-text\">This content is a little bit longer.</p>\r\n                </div>\r\n            </Link>\r\n        </div >\r\n    )\r\n}\r\n\r\nCalendar.propTypes = { setMonth: PropTypes.func.isRequired, month: PropTypes.string }\r\n\r\nconst mapStateToProps = state => ({\r\n    month: state.month\r\n})\r\n\r\nexport default connect(mapStateToProps, { setMonth, fetchPlants })(Calendar);","import { FETCH_PLANTS, MONTH, FILTER, PLANT } from './types';\r\n\r\nexport const fetchPlants = () => dispatch => {\r\n    (async function fetchData() {\r\n        let res = await fetch('https://raw.githubusercontent.com/Sky020/Garden-Planner/master/plantData.json');\r\n        const info = await res.json();\r\n        dispatch({ type: FETCH_PLANTS, data: info });\r\n    })();\r\n}\r\n\r\nexport const setMonth = (month, isSowOrHarv) => dispatch => {\r\n    dispatch({ type: MONTH, data: [month, isSowOrHarv] })\r\n}\r\n\r\nexport const filterPlants = (state) => async dispatch => {\r\n    let tempCats = [...state.categories];\r\n    for await (let plant of state.plants) {\r\n        for await (let cat of tempCats) {\r\n            if (plant.category === cat.title && plant.sowMonths.includes(state.month)) {\r\n                cat.numProducts += 1;\r\n            }\r\n        }\r\n    }\r\n    await dispatch({ type: FILTER, data: [tempCats, false] })\r\n}\r\n\r\nexport const getPlantsFromCat = (plants, title, month) => async dispatch => {\r\n    let tempPlants = [];\r\n    for await (let plant of plants) {\r\n        if (plant.category === title && (plant.sowMonths.includes(month) || plant.harvestMonths.includes(month))) {\r\n            tempPlants.push(plant)\r\n        }\r\n    }\r\n    await dispatch({ type: PLANT, data: [tempPlants, false] })\r\n}","import React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../styles/App.css';\r\nimport '../styles/Categories.css';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { filterPlants, getPlantsFromCat } from '../actions/plantActions';\r\nimport PropTypes from 'prop-types';\r\n\r\n// const URL = \"https://www.thompson-morgan.com\"\r\n\r\nconst Categories = (props) => {\r\n\r\n    useEffect(() => {\r\n        console.log(\"CATEGORIES: \", props.innerState)\r\n        props.filterPlants(props.innerState)\r\n    }, [props.plants])\r\n    if (props.isLoading) {\r\n        // props.filterPlants(props.innerState)\r\n        return (\r\n            <div id=\"container\">\r\n                <h1>LOADING DATA...</h1>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div id=\"container\">\r\n                <div className=\"card-deck justify-content-center flex-lg-row flex-wrap\">\r\n                    {props.categories.map((category, i) => <Card key={i} plants={props.plants} action={props.getPlantsFromCat} title={category.title} month={props.month} numPlants={category.numProducts} img={category.img} />)}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst Card = (props) => {\r\n    const [isHovered, setIsHovered] = React.useState(false);\r\n    const handleHover = () => {\r\n        setIsHovered(true);\r\n    }\r\n    const handleUnhover = () => {\r\n        setIsHovered(false);\r\n    }\r\n    return (\r\n        <div id=\"cats-container\" className={\"card shadow m-2 m-lg-1\" + (isHovered ? \" hovered-img\" : \"\")} onMouseEnter={handleHover} onMouseLeave={handleUnhover}>\r\n            <Link to=\"/plants\" onClick={() => props.action(props.plants, props.title, props.month)}>\r\n                <div className=\"card-body d-flex flex-column justify-content-center align-items-center\">\r\n                    <h4 className=\"card-title\">{props.title} ({props.numPlants})</h4>\r\n                    <img alt=\"Some category\" src={props.img} />\r\n                </div>\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nCategories.propTypes = { filterPlants: PropTypes.func.isRequired, plants: PropTypes.array, month: PropTypes.number, categories: PropTypes.array, isLoading: PropTypes.bool, innerState: PropTypes.object }\r\n\r\nconst mapStateToProps = state => ({\r\n    plants: state.plants.plants,\r\n    month: state.plants.month,\r\n    categories: state.plants.categories,\r\n    isLoading: state.plants.isLoading,\r\n    innerState: state.plants\r\n})\r\n\r\nexport default connect(mapStateToProps, { filterPlants, getPlantsFromCat })(Categories);","import React, { useState, useEffect } from 'react';\r\nimport '../styles/App.css';\r\nimport '../styles/Plants.css';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nconst Plants = (props) => {\r\n    const [modalContent, setModalContent] = useState('');\r\n    const [isToggled, setIsToggled] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    const showModal = (plant) => {\r\n        setIsToggled(!isToggled);\r\n        setModalContent(plant)\r\n    }\r\n    useEffect(() => {\r\n        setIsLoading(false);\r\n    }, [props.isLoading])\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <div>\r\n                <h1>LOADING DATA...</h1>\r\n            </div>\r\n        )\r\n    } else {\r\n        console.log(\"RUN2\")\r\n        return (\r\n            <div>\r\n                <div className={\"modal fade justify-content-center align-items-center\" + (isToggled ? \" d-flex show\" : \"\")} id=\"exampleModal3\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModal3Label\" aria-hidden={String(isToggled)}>\r\n                    <div className=\"modal-dialog mw-100\" role=\"document\">\r\n                        <div className=\"modal-content\">\r\n                            <div className=\"modal-header\">\r\n                                <h5 className=\"modal-title\" id=\"exampleModal3Label\">{modalContent.title}</h5>\r\n                                <button type=\"button\" className=\"close\" onClick={showModal} data-dismiss=\"modal\" aria-label=\"Close\">\r\n                                    <span aria-hidden=\"true\">&times;</span>\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"modal-body\">\r\n                                {isToggled && <Grid sow={modalContent.sowMonths} harv={modalContent.harvestMonths} flow={modalContent.floweringMonths} />}<hr></hr>\r\n                                {modalContent.desc}<hr></hr>\r\n                                {modalContent.sowDesc}\r\n                            </div>\r\n                            <div className=\"modal-footer\">\r\n                                <button type=\"button\" className=\"btn btn-secondary\" onClick={showModal} data-dismiss=\"modal\">Close</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div id=\"accordion\" role=\"tablist\">\r\n                    {props.sow && <Sow sow={props.plants} showModal={showModal} />}\r\n                    {props.harvest && <Harvest harvest={props.plants} showModal={showModal} />}\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nconst Grid = (props) => {\r\n    const MONTHS = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    // console.log(props.sow, props.harv, props.flow)\r\n    return (\r\n        <div className=\"grid-container\">\r\n            {MONTHS.map((month, i) => <div key={i} className=\"grid-item\" ><div>{month}</div><div className={props.sow.includes(i) ? \"blue\" : \"\"}>{props.sow.includes(i) ? 's' : ''}</div><div className={props.harv.includes(i) ? \"orange\" : \"\"}>{props.harv.includes(i) ? 'h' : ''}</div><div className={props.flow.includes(i) ? \"green\" : \"\"}>{props.flow.includes(i) ? \"f\" : ''}</div></div>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Sow = (props) => {\r\n    const [isToggled, setIsToggled] = useState(false);\r\n    return (\r\n        <>\r\n            <div className=\"card\">\r\n                <div className=\"card-header\" role=\"tab\" id=\"headingOne\">\r\n                    <h5 className=\"mb-0\">\r\n                        <a data-toggle=\"collapse\" href=\"#collapseOne\" onClick={() => setIsToggled(!isToggled)} aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            Sow\r\n                        </a>\r\n                    </h5>\r\n                </div>\r\n            </div>\r\n            <div id=\"collapseOne\" className={\"collapse\" + (isToggled ? \" show\" : \"\")} role=\"tabpanel\" aria-labelledby=\"headingOne\">\r\n                <div className=\"card-body\">\r\n                    <Plant plants={props.sow} showModal={props.showModal} />\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nconst Harvest = (props) => {\r\n    const [isToggled, setIsToggled] = useState(false);\r\n    return (\r\n        <>\r\n            <div className=\"card\">\r\n                <div className=\"card-header\" role=\"tab\" id=\"headingTwo\">\r\n                    <h5 className=\"mb-0\">\r\n                        <a className=\"collapsed\" data-toggle=\"collapse\" href=\"#collapseTwo\" onClick={() => setIsToggled(!isToggled)} aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Harvest\r\n                    </a>\r\n                    </h5>\r\n                </div>\r\n            </div>\r\n            <div id=\"collapseTwo\" className={\"collapse\" + (isToggled ? \" show\" : \"\")} role=\"tabpanel\" aria-labelledby=\"headingTwo\">\r\n                <div className=\"card-body\">\r\n                    <Plant plants={props.harvest} showModal={props.showModal} />\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nconst Plant = (props) => {\r\n    return (\r\n        <div id=\"container\">\r\n            <div className=\"card-deck flex-sm-column justify-content-center flex-lg-row flex-wrap\">\r\n                {props.plants.map((plant, i) => <Card key={i} showModal={props.showModal} plant={plant} />)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Card = (props) => {\r\n    const [isHovered, setIsHovered] = React.useState(false);\r\n    const handleHover = () => {\r\n        setIsHovered(true);\r\n    }\r\n    const handleUnhover = () => {\r\n        setIsHovered(false);\r\n    }\r\n    return (\r\n        <div id=\"plants-container\" className={\"card shadow m-2 m-lg-1\" + (isHovered ? \" hovered-img\" : \"\")} onMouseEnter={handleHover} onMouseLeave={handleUnhover}>\r\n            <a href=\"#\" onClick={() => props.showModal(props.plant)}>\r\n                <div className=\"card-body d-flex flex-column justify-content-center align-items-center\">\r\n                    <h4 className=\"card-title\">{props.plant.title}</h4>\r\n                    <img alt=\"Some plant\" src={props.plant.img} />\r\n                </div>\r\n            </a>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    plants: state.plants.plants,\r\n    isLoading: state.plants.isLoading,\r\n    sow: state.plants.sow,\r\n    harvest: state.plants.harvest\r\n});\r\n\r\nexport default connect(mapStateToProps)(Plants);","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport './styles/App.css';\nimport Calendar from './components/Calendar';\nimport Categories from './components/Categories';\nimport Plants from './components/Plants';\n\n// const store = createStore(() => [], {}, applyMiddleware());\n\nfunction App() {\n  // const [data, setData] = useState([]);\n  // const [month, setMonth] = useState();\n  // const [plants, setPlants] = useState([]);\n\n  // function getMonth(mon) {\n  //   setMonth(mon);\n  // }\n  // function getData(cat) {\n  //   let myPlants = [];\n  //   for (let plant of data) {\n  //     if (plant.category === cat) {\n  //       myPlants.push(plant);\n  //     }\n  //   }\n  //   setPlants(myPlants)\n  // }\n  return (\n    <Provider store={store}>\n      <Router>\n        <div>\n          <Link to=\"/\"><h1 id=\"heading\">My Garden Planner</h1></Link>\n          <Switch>\n            <Route path=\"/categories\">\n              <Categories />\n            </Route>\n            <Route path=\"/plants\">\n              <Plants />\n            </Route>\n            <Route path=\"/\">\n              <Calendar />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </Provider>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../node_modules/bootstrap/dist/css/bootstrap.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}